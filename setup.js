#!/usr/bin/env node

/**
 * Setup Script for Vortex PCs Integrations
 * Run this script to configure Firebase, Stripe, and Strapi step by step
 *
 * Usage: node setup.js
 */

const readline = require("readline");
const fs = require("fs");
const path = require("path");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const question = (query) =>
  new Promise((resolve) => rl.question(query, resolve));

async function setupEnvironment() {
  console.log("üöÄ Vortex PCs Integration Setup\n");
  console.log(
    "This script will help you configure Firebase, Stripe, and Strapi.\n"
  );

  // Read current .env file
  const envPath = path.join(__dirname, ".env");
  let envContent = "";

  try {
    envContent = fs.readFileSync(envPath, "utf8");
  } catch (error) {
    console.log("‚ö†Ô∏è  .env file not found. Creating from template...");
    try {
      envContent = fs.readFileSync(
        path.join(__dirname, ".env.example"),
        "utf8"
      );
    } catch (error) {
      console.error(
        "‚ùå Neither .env nor .env.example found. Please create .env.example first."
      );
      process.exit(1);
    }
  }

  console.log("üìã Current environment configuration:");
  console.log("=====================================");

  // Parse current env values
  const envVars = {};
  envContent.split("\n").forEach((line) => {
    if (line.includes("=") && !line.startsWith("#")) {
      const [key, value] = line.split("=");
      envVars[key.trim()] = value.trim();
    }
  });

  // Firebase Configuration
  console.log("\nüî• FIREBASE CONFIGURATION");
  console.log("==========================");

  const configureFirebase = await question("Configure Firebase? (y/n): ");
  if (configureFirebase.toLowerCase() === "y") {
    console.log("\nStep 1: Go to https://console.firebase.google.com/");
    console.log("Step 2: Create project or select existing");
    console.log("Step 3: Add web app and copy config values\n");

    envVars.VITE_FIREBASE_API_KEY = await question("Firebase API Key: ");
    envVars.VITE_FIREBASE_AUTH_DOMAIN = await question(
      "Firebase Auth Domain: "
    );
    envVars.VITE_FIREBASE_PROJECT_ID = await question("Firebase Project ID: ");
    envVars.VITE_FIREBASE_STORAGE_BUCKET = await question(
      "Firebase Storage Bucket: "
    );
    envVars.VITE_FIREBASE_MESSAGING_SENDER_ID = await question(
      "Firebase Messaging Sender ID: "
    );
    envVars.VITE_FIREBASE_APP_ID = await question("Firebase App ID: ");
  }

  // Stripe Configuration
  console.log("\nüí≥ STRIPE CONFIGURATION");
  console.log("========================");

  const configureStripe = await question("Configure Stripe? (y/n): ");
  if (configureStripe.toLowerCase() === "y") {
    console.log("\nStep 1: Go to https://dashboard.stripe.com/");
    console.log("Step 2: Navigate to Developers > API keys");
    console.log("Step 3: Copy your publishable key (pk_test_...)\n");

    envVars.VITE_STRIPE_PUBLISHABLE_KEY = await question(
      "Stripe Publishable Key: "
    );
    envVars.VITE_STRIPE_BACKEND_URL =
      (await question("Stripe Backend URL (or leave empty): ")) ||
      "http://localhost:3001/api/stripe";
  }

  // Strapi Configuration
  console.log("\nüìù STRAPI CONFIGURATION");
  console.log("========================");

  const configureStrapi = await question("Configure Strapi? (y/n): ");
  if (configureStrapi.toLowerCase() === "y") {
    console.log("\nOption 1: Use Strapi Cloud (https://cloud.strapi.io/)");
    console.log("Option 2: Local Strapi (http://localhost:1337)");
    console.log("Option 3: Self-hosted Strapi\n");

    envVars.VITE_STRAPI_URL =
      (await question("Strapi URL: ")) || "http://localhost:1337";
    envVars.VITE_STRAPI_API_TOKEN = await question(
      "Strapi API Token (or leave empty): "
    );
  }

  // Generate new .env content
  let newEnvContent = "# Environment Variables - Generated by setup script\n";
  newEnvContent += `# Generated on: ${new Date().toISOString()}\n\n`;

  newEnvContent += "# FIREBASE CONFIGURATION\n";
  newEnvContent += `VITE_FIREBASE_API_KEY=${
    envVars.VITE_FIREBASE_API_KEY || ""
  }\n`;
  newEnvContent += `VITE_FIREBASE_AUTH_DOMAIN=${
    envVars.VITE_FIREBASE_AUTH_DOMAIN || ""
  }\n`;
  newEnvContent += `VITE_FIREBASE_PROJECT_ID=${
    envVars.VITE_FIREBASE_PROJECT_ID || ""
  }\n`;
  newEnvContent += `VITE_FIREBASE_STORAGE_BUCKET=${
    envVars.VITE_FIREBASE_STORAGE_BUCKET || ""
  }\n`;
  newEnvContent += `VITE_FIREBASE_MESSAGING_SENDER_ID=${
    envVars.VITE_FIREBASE_MESSAGING_SENDER_ID || ""
  }\n`;
  newEnvContent += `VITE_FIREBASE_APP_ID=${
    envVars.VITE_FIREBASE_APP_ID || ""
  }\n\n`;

  newEnvContent += "# STRIPE CONFIGURATION\n";
  newEnvContent += `VITE_STRIPE_PUBLISHABLE_KEY=${
    envVars.VITE_STRIPE_PUBLISHABLE_KEY || ""
  }\n`;
  newEnvContent += `VITE_STRIPE_BACKEND_URL=${
    envVars.VITE_STRIPE_BACKEND_URL || ""
  }\n\n`;

  newEnvContent += "# STRAPI CONFIGURATION\n";
  newEnvContent += `VITE_STRAPI_URL=${
    envVars.VITE_STRAPI_URL || "http://localhost:1337"
  }\n`;
  newEnvContent += `VITE_STRAPI_API_TOKEN=${
    envVars.VITE_STRAPI_API_TOKEN || ""
  }\n\n`;

  newEnvContent += "# DEVELOPMENT SETTINGS\n";
  newEnvContent += `NODE_ENV=${envVars.NODE_ENV || "development"}\n`;

  // Write .env file
  fs.writeFileSync(envPath, newEnvContent);

  console.log("\n‚úÖ Configuration saved to .env file!");
  console.log("\nüìã Next Steps:");
  console.log("==============");

  if (configureFirebase.toLowerCase() === "y") {
    console.log("üî• Firebase:");
    console.log("  1. Enable Authentication in Firebase Console");
    console.log("  2. Create Firestore Database");
    console.log("  3. Set up security rules");
    console.log("  4. Uncomment Firebase imports in config/firebase.ts");
  }

  if (configureStripe.toLowerCase() === "y") {
    console.log("üí≥ Stripe:");
    console.log("  1. Deploy backend API for payment processing");
    console.log("  2. Set up webhook endpoints");
    console.log("  3. Test with test card numbers");
  }

  if (configureStrapi.toLowerCase() === "y") {
    console.log("üìù Strapi:");
    console.log("  1. Create content types (Products, PC Builds)");
    console.log("  2. Add sample content");
    console.log("  3. Set up API permissions");
  }

  console.log("\nüß™ Test your setup:");
  console.log("  npm run dev");
  console.log("  Open http://localhost:3000");

  console.log("\nüìñ For detailed instructions, see:");
  console.log("  - BACKEND_INTEGRATION_GUIDE.md");
  console.log("  - CLEAN_DEPLOYMENT_GUIDE.md");

  rl.close();
}

setupEnvironment().catch(console.error);
